node {
   checkout scm
   def server
   def client
   def buildInfo
   def uploadSpec
   String serverName
   load "$JENKINS_HOME/workspace/RC_Car/ci/variables.groovy"

    stage("Get project"){
        git branch: repo_branch, url: repo_url
    }

    def buildImage = docker.image("conanio/gcc6")
    buildImage.inside("--network rt_cont_int") {

        echo "AAA ${CONAN_USER_HOME}"
        env.CONAN_USER_HOME =  "./conan-cache"
        echo "AAA ${CONAN_USER_HOME}"
        echo "AAA ${env.CONAN_USER_HOME}".toString()

        stage("Build project"){
            sh "mkdir -p build"
            sh "ls -la ${pwd()}"
            dir ('build') {
              sh "cmake -DCMAKE_BUILD_TYPE=Release ../ && cmake --build ."
            }
        }

        stage("Configure Artifactory/Conan"){
            server = Artifactory.server "${env.ARTIFACTORY_NAME}"
            client = Artifactory.newConanClient()
            serverName = client.remote.add server: server, repo: "${env.ARTIFACTORY_REPO}".toString()
        }

        stage("Upload binaries and publish build info"){
            uploadSpec = """{
              "files": [
                {
                  "pattern": "build/bin/*",
                  "target": "conan-local/binaries/"
                }
             ]
            }"""
            buildInfo = client.run(command: "install . -e CONAN_USER_HOME=../build/packages")
            buildInfo = server.upload uploadSpec
            buildInfo.number = "v0.${BUILD_NUMBER}" // BUILD_NUMBER is a Jenkins environment variable
            buildInfo.env.capture = true
            // Build retention not available with Artifactory Community Edition
            //buildInfo.retention maxBuilds: "${env.MAX_BUILDS}".toString()
            //buildInfo.retention maxDays: "${env.MAX_DAYS}".toString()
            server.publishBuildInfo buildInfo
        }

        stage("Test project") {
            node (label: 'slave-rpi') {

            }
        }
    }

}

